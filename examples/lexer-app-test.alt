// UTF-8 identifiers and strings
emojiVar = "üòÄ"
accented = "caf√©"
—Ä—É—Å—Å–∫–∏–π = "—Ç–µ—Å—Ç"

// Brackets and nesting
func() { [1, 2, [3, 4], []] }

// Keywords and operators
if (x >= 10 && y != 5) { return x + y; }
async { await fetch() }

// Numbers and edge cases
zero = 0
float = 3.1415
scientific = 1e-9
hex = 0xFF
bin = 0b1010

// Strings and escapes
str = "hello\nworld"
str2 = 'single quotes'
str3 = "emoji: üòé"

// Comments
// This is a single-line comment
/* Multi-line
   comment */

// Tag/JSX-like syntax
<div attr="val" @mod>{text}</div>

// Value binding and at-modifier
!boundVar
@decorator

// Control flow and async blocks
for (i in [1,2,3]) { print(i); }
async { [doAsync()] [handleAsync()] }

// Error cases
unclosed_string = "oops
invalid_utf = "\xFF"

// Empty array and nested blocks
empty = []
nested = { [ [ [ ] ] ] }
// UI Component Example with full lexer coverage

@component
<Panel title="Welcome üòÄ" theme="dark" @responsive>
   <Header>
      {async {
         [loadUser()] [loadSettings()]
      }}
      <Avatar src="user.png" alt="üë§" />
      <span>{userName}</span>
   </Header>
   <Content>
      <List>
         {for (item in items) {
            <ListItem key={item.id}>
               {item.name} - {item.value}
            </ListItem>
         }}
      </List>
      <Button @primary onClick={handleClick}>Click Me</Button>
      <StatusBar>
         {status ? "‚úÖ Success" : "‚ùå Error"}
      </StatusBar>
   </Content>
   <Footer>
      <span>¬© 2025 Caf√©</span>
   </Footer>
</Panel>

// Async function and UTF-8 test
async { [fetchData()] [process("–¥–∞–Ω–Ω—ã–µ")] }
emojiVar = "üòé"
accented = "caf√©"
—Ä—É—Å—Å–∫–∏–π = "—Ç–µ—Å—Ç"

// Edge cases
emptyArr = []
nested = { [ [ [ ] ] ] }
str = "hello\nworld"
num = 42
float = 3.14
bin = 0b1010
hex = 0xFF
